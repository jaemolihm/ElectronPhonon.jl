                                                                                      
                                       ``:oss/                                        
                           `.+s+.     .+ys--yh+     `./ss+.                           
                          -sh//yy+`   +yy   +yy    -+h+-oyy                           
                          -yh- .oyy/.-sh.   .syo-.:sy-  /yh                           
                 `.-.`    `yh+   -oyyyo.     `/syys:    oys      `.`                  
               `/+ssys+-` `sh+      `                   oys`   .:osyo`                
               -yh- ./syyooyo`                          .sys+/oyo--yh/                
               `yy+    .-:-.                             `-/+/:`  -sh-                
                /yh.                                              oys                 
          ``..---hho---------`   .---------..`      `.-----.`    -hd+---.             
       `./osmNMMMMMMMMMMMMMMMs. +NNMMMMMMMMNNmh+.   yNMMMMMNm-  oNMMMMMNmo++:`        
       +sy--/sdMMMhyyyyyyyNMMh- .oyNMMmyyyyyhNMMm+` -yMMMdyyo:` .oyyNMMNhs+syy`       
       -yy/   /MMM+.`-+/``mMMy-   `mMMh:`````.dMMN:` `MMMy-`-dhhy```mMMy:``+hs        
        -yy+` /MMMo:-mMM+`-oo/.    mMMh:     `dMMN/`  dMMm:`dMMMMy..MMMo-.+yo`        
         .sys`/MMMMNNMMMs-         mMMmyooooymMMNo:   oMMM/sMMMMMM++MMN//oh:          
          `sh+/MMMhyyMMMs- `-`     mMMMMMMMMMNmy+-`   -MMMhMMMsmMMmdMMd/yy+           
    `-/+++oyy-/MMM+.`/hh/.`mNm:`   mMMd+/////:-.`      NMMMMMd/:NMMMMMy:/yyo/:.`      
   +os+//:-..-oMMMo:--:::-/MMMo. .-mMMd+---`           hMMMMN+. oMMMMMo. `-+osyso:`   
   syo     `mNMMMMMNNNNNNNNMMMo.oNNMMMMMNNNN:`         +MMMMs:`  dMMMN/`     ``:syo   
   /yh`     :syyyyyyyyyyyyyyyy+.`+syyyyyyyyo:`         .oyys:`   .oyys:`        +yh   
   -yh-        ````````````````    `````````              ``        ``          oys   
   -+h/------------------------::::::::://////++++++++++++++++++++++///////::::/yd:   
   shdddddddddddddddddddddddddddddhhhhhhhhyyyyyssssssssssssssssyyyyyyyhhhhhhhddddh`   
                                                                                      
  S. Ponce, E. R. Margine, C. Verdi, and F. Giustino,                                 
                                                Comput. Phys. Commun. 209, 116 (2016) 
                                                                                      

     Program EPW v.5.3.1 starts on  2Nov2021 at 12:45:49 

     This program is part of the open-source Quantum ESPRESSO suite
     for quantum simulation of materials; please cite
         "P. Giannozzi et al., J. Phys.:Condens. Matter 21 395502 (2009);
         "P. Giannozzi et al., J. Phys.:Condens. Matter 29 465901 (2017);
          URL http://www.quantum-espresso.org", 
     in publications or presentations arising from this work. More details at
     http://www.quantum-espresso.org/quote

     Parallel version (MPI), running on     2 processors

     MPI processes distributed on     1 nodes
     K-points division:     npool     =       2
     Reading input from epw_setup.in

     No temperature supplied. Setting temps(:) to 300 K.

     Reading xml data from directory:

     temp/bn.save/
     Message from routine read_pp_mesh:
     mesh size missing, using the one in header
     Message from routine read_pp_mesh:
     mesh size missing, using the one in header

     IMPORTANT: XC functional enforced from input :
     Exchange-correlation= PW
                           (   1   4   0   0   0   0   0)
     Any further DFT definition will be discarded
     Please, verify this is what you really want

 
     G-vector sticks info
     --------------------
     sticks:   dense  smooth     PW     G-vecs:    dense   smooth      PW
     Sum         439     439    151                 6231     6231    1243
 
     Reading collected, re-writing distributed wavefunctions

     --                                                                         

     bravais-lattice index     =            2
     lattice parameter (a_0)   =       6.8300  a.u.
     unit-cell volume          =      79.6530 (a.u.)^3
     number of atoms/cell      =            2
     number of atomic types    =            2
     kinetic-energy cut-off    =      70.0000  Ry
     charge density cut-off    =     280.0000  Ry
     Exchange-correlation= PW
                           (   1   4   0   0   0   0   0)


     celldm(1)=    6.83000  celldm(2)=    0.00000  celldm(3)=    0.00000
     celldm(4)=    0.00000  celldm(5)=    0.00000  celldm(6)=    0.00000

     crystal axes: (cart. coord. in units of a_0)
               a(1) = ( -0.5000  0.0000  0.5000 )  
               a(2) = (  0.0000  0.5000  0.5000 )  
               a(3) = ( -0.5000  0.5000  0.0000 )  

     reciprocal axes: (cart. coord. in units 2 pi/a_0)
               b(1) = ( -1.0000 -1.0000  1.0000 )  
               b(2) = (  1.0000  1.0000  1.0000 )  
               b(3) = ( -1.0000  1.0000 -1.0000 )  


     Atoms inside the unit cell: 

   Cartesian axes

     site n.  atom      mass           positions (a_0 units)
        1        B   10.8110   tau( 1) = (   -0.12500    0.12500    0.12500  )
        2        N   14.0067   tau( 2) = (    0.12500   -0.12500   -0.12500  )
 
     25 Sym.Ops. (with q -> -q+G )


     G cutoff =  330.8565  (   6231 G-vectors)     FFT grid: ( 30, 30, 30)
     number of k points=   64
                       cart. coord. in units 2pi/a_0
        k(    1) = (   0.0000000   0.0000000   0.0000000), wk =   0.0312500
        k(    2) = (  -0.2500000   0.2500000  -0.2500000), wk =   0.0312500
        k(    3) = (  -0.5000000   0.5000000  -0.5000000), wk =   0.0312500
        k(    4) = (  -0.7500000   0.7500000  -0.7500000), wk =   0.0312500
        k(    5) = (   0.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(    6) = (   0.0000000   0.5000000   0.0000000), wk =   0.0312500
        k(    7) = (  -0.2500000   0.7500000  -0.2500000), wk =   0.0312500
        k(    8) = (  -0.5000000   1.0000000  -0.5000000), wk =   0.0312500
        k(    9) = (   0.5000000   0.5000000   0.5000000), wk =   0.0312500
        k(   10) = (   0.2500000   0.7500000   0.2500000), wk =   0.0312500
        k(   11) = (   0.0000000   1.0000000   0.0000000), wk =   0.0312500
        k(   12) = (  -0.2500000   1.2500000  -0.2500000), wk =   0.0312500
        k(   13) = (   0.7500000   0.7500000   0.7500000), wk =   0.0312500
        k(   14) = (   0.5000000   1.0000000   0.5000000), wk =   0.0312500
        k(   15) = (   0.2500000   1.2500000   0.2500000), wk =   0.0312500
        k(   16) = (   0.0000000   1.5000000   0.0000000), wk =   0.0312500
        k(   17) = (  -0.2500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   18) = (  -0.5000000   0.0000000   0.0000000), wk =   0.0312500
        k(   19) = (  -0.7500000   0.2500000  -0.2500000), wk =   0.0312500
        k(   20) = (  -1.0000000   0.5000000  -0.5000000), wk =   0.0312500
        k(   21) = (   0.0000000   0.0000000   0.5000000), wk =   0.0312500
        k(   22) = (  -0.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(   23) = (  -0.5000000   0.5000000   0.0000000), wk =   0.0312500
        k(   24) = (  -0.7500000   0.7500000  -0.2500000), wk =   0.0312500
        k(   25) = (   0.2500000   0.2500000   0.7500000), wk =   0.0312500
        k(   26) = (   0.0000000   0.5000000   0.5000000), wk =   0.0312500
        k(   27) = (  -0.2500000   0.7500000   0.2500000), wk =   0.0312500
        k(   28) = (  -0.5000000   1.0000000   0.0000000), wk =   0.0312500
        k(   29) = (   0.5000000   0.5000000   1.0000000), wk =   0.0312500
        k(   30) = (   0.2500000   0.7500000   0.7500000), wk =   0.0312500
        k(   31) = (   0.0000000   1.0000000   0.5000000), wk =   0.0312500
        k(   32) = (  -0.2500000   1.2500000   0.2500000), wk =   0.0312500
        k(   33) = (  -0.5000000  -0.5000000   0.5000000), wk =   0.0312500
        k(   34) = (  -0.7500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   35) = (  -1.0000000   0.0000000   0.0000000), wk =   0.0312500
        k(   36) = (  -1.2500000   0.2500000  -0.2500000), wk =   0.0312500
        k(   37) = (  -0.2500000  -0.2500000   0.7500000), wk =   0.0312500
        k(   38) = (  -0.5000000   0.0000000   0.5000000), wk =   0.0312500
        k(   39) = (  -0.7500000   0.2500000   0.2500000), wk =   0.0312500
        k(   40) = (  -1.0000000   0.5000000   0.0000000), wk =   0.0312500
        k(   41) = (   0.0000000   0.0000000   1.0000000), wk =   0.0312500
        k(   42) = (  -0.2500000   0.2500000   0.7500000), wk =   0.0312500
        k(   43) = (  -0.5000000   0.5000000   0.5000000), wk =   0.0312500
        k(   44) = (  -0.7500000   0.7500000   0.2500000), wk =   0.0312500
        k(   45) = (   0.2500000   0.2500000   1.2500000), wk =   0.0312500
        k(   46) = (   0.0000000   0.5000000   1.0000000), wk =   0.0312500
        k(   47) = (  -0.2500000   0.7500000   0.7500000), wk =   0.0312500
        k(   48) = (  -0.5000000   1.0000000   0.5000000), wk =   0.0312500
        k(   49) = (  -0.7500000  -0.7500000   0.7500000), wk =   0.0312500
        k(   50) = (  -1.0000000  -0.5000000   0.5000000), wk =   0.0312500
        k(   51) = (  -1.2500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   52) = (  -1.5000000   0.0000000   0.0000000), wk =   0.0312500
        k(   53) = (  -0.5000000  -0.5000000   1.0000000), wk =   0.0312500
        k(   54) = (  -0.7500000  -0.2500000   0.7500000), wk =   0.0312500
        k(   55) = (  -1.0000000   0.0000000   0.5000000), wk =   0.0312500
        k(   56) = (  -1.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(   57) = (  -0.2500000  -0.2500000   1.2500000), wk =   0.0312500
        k(   58) = (  -0.5000000   0.0000000   1.0000000), wk =   0.0312500
        k(   59) = (  -0.7500000   0.2500000   0.7500000), wk =   0.0312500
        k(   60) = (  -1.0000000   0.5000000   0.5000000), wk =   0.0312500
        k(   61) = (   0.0000000   0.0000000   1.5000000), wk =   0.0312500
        k(   62) = (  -0.2500000   0.2500000   1.2500000), wk =   0.0312500
        k(   63) = (  -0.5000000   0.5000000   1.0000000), wk =   0.0312500
        k(   64) = (  -0.7500000   0.7500000   0.7500000), wk =   0.0312500

     PseudoPot. # 1 for B  read from file:
     ./B.dojo.sr.ONCVv0.4.lda.standard.upf
     MD5 check sum: 69d4ef3dbc0509a37f66397c3ecc5321
     Pseudo is Norm-conserving + core correction, Zval =  3.0
     Generated using ONCVPSP code by D. R. Hamann
     Using radial grid of 1498 points,  4 beta functions with: 
                l(1) =   0
                l(2) =   0
                l(3) =   1
                l(4) =   1

     PseudoPot. # 2 for N  read from file:
     ./N.dojo.sr.ONCVv0.4.lda.standard.upf
     MD5 check sum: f7cfb052850314c53fa2901765c0b356
     Pseudo is Norm-conserving + core correction, Zval =  5.0
     Generated using ONCVPSP code by D. R. Hamann
     Using radial grid of 1058 points,  4 beta functions with: 
                l(1) =   0
                l(2) =   0
                l(3) =   1
                l(4) =   1
     EPW          :      0.24s CPU      0.26s WALL

     EPW          :      0.42s CPU      0.44s WALL

     -------------------------------------------------------------------
     Wannierization on  4 x  4 x  4 electronic grid
     -------------------------------------------------------------------
 
     Spin CASE ( default = unpolarized )
 
     Initializing Wannier90
 
 
     Initial Wannier projections
 
     (  -0.12500  -0.12500  -0.12500) :  l =  -3 mr =   1
     (  -0.12500  -0.12500  -0.12500) :  l =  -3 mr =   2
     (  -0.12500  -0.12500  -0.12500) :  l =  -3 mr =   3
     (  -0.12500  -0.12500  -0.12500) :  l =  -3 mr =   4
     (   0.12500   0.12500   0.12500) :  l =  -3 mr =   1
     (   0.12500   0.12500   0.12500) :  l =  -3 mr =   2
     (   0.12500   0.12500   0.12500) :  l =  -3 mr =   3
     (   0.12500   0.12500   0.12500) :  l =  -3 mr =   4

      - Number of bands is ( 12)
      - Number of total bands is ( 12)
      - Number of excluded bands is (  0)
      - Number of wannier functions is (  8)
      - All guiding functions are given 
 
  Reading data about k-point neighbours 
 
      - All neighbours are found 
 
     AMN
      k points =    64 in    2 pools
            1 of   32 on ionode
            2 of   32 on ionode
            3 of   32 on ionode
            4 of   32 on ionode
            5 of   32 on ionode
            6 of   32 on ionode
            7 of   32 on ionode
            8 of   32 on ionode
            9 of   32 on ionode
           10 of   32 on ionode
           11 of   32 on ionode
           12 of   32 on ionode
           13 of   32 on ionode
           14 of   32 on ionode
           15 of   32 on ionode
           16 of   32 on ionode
           17 of   32 on ionode
           18 of   32 on ionode
           19 of   32 on ionode
           20 of   32 on ionode
           21 of   32 on ionode
           22 of   32 on ionode
           23 of   32 on ionode
           24 of   32 on ionode
           25 of   32 on ionode
           26 of   32 on ionode
           27 of   32 on ionode
           28 of   32 on ionode
           29 of   32 on ionode
           30 of   32 on ionode
           31 of   32 on ionode
           32 of   32 on ionode
 
     AMN calculated
 
     MMN
      k points =    64 in    2 pools
            1 of   32 on ionode
            2 of   32 on ionode
            3 of   32 on ionode
            4 of   32 on ionode
            5 of   32 on ionode
            6 of   32 on ionode
            7 of   32 on ionode
            8 of   32 on ionode
            9 of   32 on ionode
           10 of   32 on ionode
           11 of   32 on ionode
           12 of   32 on ionode
           13 of   32 on ionode
           14 of   32 on ionode
           15 of   32 on ionode
           16 of   32 on ionode
           17 of   32 on ionode
           18 of   32 on ionode
           19 of   32 on ionode
           20 of   32 on ionode
           21 of   32 on ionode
           22 of   32 on ionode
           23 of   32 on ionode
           24 of   32 on ionode
           25 of   32 on ionode
           26 of   32 on ionode
           27 of   32 on ionode
           28 of   32 on ionode
           29 of   32 on ionode
           30 of   32 on ionode
           31 of   32 on ionode
           32 of   32 on ionode
     MMN calculated
 
     Running Wannier90
 
     Wannier Function centers (cartesian, alat) and spreads (ang):
 
     (   0.08390  -0.08390  -0.08390) :   0.66495
     (   0.16610  -0.08390  -0.16610) :   0.66495
     (   0.08390  -0.16610  -0.16610) :   0.66495
     (   0.16610  -0.16610  -0.08390) :   0.66495
     (  -0.08127   0.16873   0.16873) :   1.00894
     (  -0.08127   0.08127   0.08127) :   1.00894
     (  -0.16873   0.16873   0.08127) :   1.00894
     (  -0.16873   0.08127   0.16873) :   1.00894
 
     -------------------------------------------------------------------
     WANNIER      :      4.67s CPU      4.75s WALL (       1 calls)
     -------------------------------------------------------------------

     Calculating kgmap

     Progress kgmap: ########################################
     kmaps        :      0.01s CPU      0.01s WALL (       1 calls)
     Symmetries of Bravais lattice:  48
     Symmetries of crystal:          24

     Reading interatomic force constants

     Read Z* and epsilon
     IFC last    0.0091940
      Imposed simple ASR

     Finished reading ifcs



     ===================================================================
     irreducible q point #    1
     ===================================================================

     Symmetries of small group of q: 24
          in addition sym. q -> -q+G:
 
     Number of q in the star =    1
     List of q in the star:
          1   0.000000000   0.000000000   0.000000000
     Imposing acoustic sum rule on the dynamical matrix
     Read dielectric tensor and effective charges
     Dyn mat calculated from ifcs
 
        q(    1 ) = (   0.0000000   0.0000000   0.0000000 )


     ===================================================================
     irreducible q point #    2
     ===================================================================

     Symmetries of small group of q:  6
          in addition sym. q -> -q+G:
 
     Number of q in the star =    4
     List of q in the star:
          1   0.500000000  -0.500000000   0.500000000
          2  -0.500000000   0.500000000   0.500000000
          3   0.500000000   0.500000000  -0.500000000
          4  -0.500000000  -0.500000000  -0.500000000
     Dyn mat calculated from ifcs
 
        q(    2 ) = (   0.5000000  -0.5000000   0.5000000 )
        q(    3 ) = (  -0.5000000   0.5000000   0.5000000 )
        q(    4 ) = (   0.5000000   0.5000000  -0.5000000 )
        q(    5 ) = (  -0.5000000  -0.5000000  -0.5000000 )


     ===================================================================
     irreducible q point #    3
     ===================================================================

     Symmetries of small group of q:  8
          in addition sym. q -> -q+G:
 
     Number of q in the star =    3
     List of q in the star:
          1   0.000000000  -1.000000000   0.000000000
          2   0.000000000   0.000000000  -1.000000000
          3  -1.000000000   0.000000000   0.000000000
     Dyn mat calculated from ifcs
 
        q(    6 ) = (   0.0000000  -1.0000000   0.0000000 )
        q(    7 ) = (   0.0000000   0.0000000  -1.0000000 )
        q(    8 ) = (  -1.0000000   0.0000000   0.0000000 )

     Writing epmatq on .epb files


     The .epb files have been correctly written


     Band disentanglement is used: nbndsub =    8

     Computes the analytic long-range interaction for polar materials [lpolar]
      
     Construct the Wigner-Seitz cell using Wannier centers and atomic positions 
     Number of WS vectors for electrons      123
     Number of WS vectors for phonons       25
     Number of WS vectors for electron-phonon       25
     Maximum number of cores for efficient parallelization       50

     Velocity matrix elements calculated
 
 
     Bloch2wane:          1 /          8
     Bloch2wane:          2 /          8
     Bloch2wane:          3 /          8
     Bloch2wane:          4 /          8
     Bloch2wane:          5 /          8
     Bloch2wane:          6 /          8
     Bloch2wane:          7 /          8
     Bloch2wane:          8 /          8
 

     Writing Hamiltonian, Dynamical matrix and EP vertex in Wann rep to file

     ===================================================================
     Memory usage:  VmHWM =       181Mb
                   VmPeak =      3771Mb
     ===================================================================
     
     Using uniform q-mesh:    1   1   1
     Size of q point mesh for interpolation:          1
     Using uniform k-mesh:    1   1   1
     Size of k point mesh for interpolation:          2
     Max number of k points per pool:                2

     Fermi energy coarse grid =  10.921574 eV

     Fermi energy is calculated from the fine k-mesh: Ef =  13.764919 eV

     Warning: check if difference with Fermi level fine grid makes sense

     ===================================================================

              ibndmin =     1  ebndmin =    -9.150 eV
              ibndmax =     8  ebndmax =    21.370 eV


     Writing data to read in the Julia code

     Calculating symmetry matrix elements, nsym = 24
  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

     Number of ep-matrix elements per pool :          384 ~=    3.00 Kb (@ 8 bytes/ DP)
      
     A selecq.fmt file was found but re-created because selecqread == .FALSE. 
     We only need to compute        1 q-points
      
     ===================================================================
     Memory usage:  VmHWM =       181Mb
                   VmPeak =      3771Mb
     ===================================================================


     Unfolding on the coarse grid
     elphon_wrap  :     22.38s CPU     22.60s WALL (       1 calls)

     INITIALIZATION: 

     set_drhoc    :      0.74s CPU      0.74s WALL (       9 calls)
     init_vloc    :      0.00s CPU      0.00s WALL (       1 calls)
     init_us_1    :      0.02s CPU      0.02s WALL (       2 calls)



     Electron-Phonon interpolation
     ephwann      :      0.68s CPU      0.76s WALL (       1 calls)
     ep-interp    :      0.00s CPU      0.00s WALL (       1 calls)

     Ham: step 1  :      0.00s CPU      0.00s WALL (       1 calls)
     Ham: step 2  :      0.01s CPU      0.01s WALL (       1 calls)
     ep: step 1   :      0.00s CPU      0.00s WALL (      48 calls)
     ep: step 2   :      0.35s CPU      0.43s WALL (       1 calls)
     wigner_seitz :      0.22s CPU      0.22s WALL (       1 calls)
     julia_export :      0.00s CPU      0.02s WALL (       1 calls)
     julia_symm   :      0.20s CPU      0.25s WALL (       1 calls)
     DynW2B       :      0.00s CPU      0.00s WALL (       1 calls)
     HamW2B       :      0.00s CPU      0.00s WALL (       3 calls)
     vmeW2B       :      0.00s CPU      0.00s WALL (       3 calls)
     ephW2Bp      :      0.00s CPU      0.00s WALL (       1 calls)
     ephW2B       :      0.00s CPU      0.00s WALL (       1 calls)


     MPI routines


     Total program execution
     EPW          :     28.15s CPU     28.55s WALL

     ===============================================================================
     The functionality-dependent EPW.bib file was created with suggested citations. 
     Please consider citing the papers listed in EPW.bib.                           
     ===============================================================================
                                                                                    
