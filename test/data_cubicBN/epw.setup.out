                                                                                      
                                       ``:oss/                                        
                           `.+s+.     .+ys--yh+     `./ss+.                           
                          -sh//yy+`   +yy   +yy    -+h+-oyy                           
                          -yh- .oyy/.-sh.   .syo-.:sy-  /yh                           
                 `.-.`    `yh+   -oyyyo.     `/syys:    oys      `.`                  
               `/+ssys+-` `sh+      `                   oys`   .:osyo`                
               -yh- ./syyooyo`                          .sys+/oyo--yh/                
               `yy+    .-:-.                             `-/+/:`  -sh-                
                /yh.                                              oys                 
          ``..---hho---------`   .---------..`      `.-----.`    -hd+---.             
       `./osmNMMMMMMMMMMMMMMMs. +NNMMMMMMMMNNmh+.   yNMMMMMNm-  oNMMMMMNmo++:`        
       +sy--/sdMMMhyyyyyyyNMMh- .oyNMMmyyyyyhNMMm+` -yMMMdyyo:` .oyyNMMNhs+syy`       
       -yy/   /MMM+.`-+/``mMMy-   `mMMh:`````.dMMN:` `MMMy-`-dhhy```mMMy:``+hs        
        -yy+` /MMMo:-mMM+`-oo/.    mMMh:     `dMMN/`  dMMm:`dMMMMy..MMMo-.+yo`        
         .sys`/MMMMNNMMMs-         mMMmyooooymMMNo:   oMMM/sMMMMMM++MMN//oh:          
          `sh+/MMMhyyMMMs- `-`     mMMMMMMMMMNmy+-`   -MMMhMMMsmMMmdMMd/yy+           
    `-/+++oyy-/MMM+.`/hh/.`mNm:`   mMMd+/////:-.`      NMMMMMd/:NMMMMMy:/yyo/:.`      
   +os+//:-..-oMMMo:--:::-/MMMo. .-mMMd+---`           hMMMMN+. oMMMMMo. `-+osyso:`   
   syo     `mNMMMMMNNNNNNNNMMMo.oNNMMMMMNNNN:`         +MMMMs:`  dMMMN/`     ``:syo   
   /yh`     :syyyyyyyyyyyyyyyy+.`+syyyyyyyyo:`         .oyys:`   .oyys:`        +yh   
   -yh-        ````````````````    `````````              ``        ``          oys   
   -+h/------------------------::::::::://////++++++++++++++++++++++///////::::/yd:   
   shdddddddddddddddddddddddddddddhhhhhhhhyyyyyssssssssssssssssyyyyyyyhhhhhhhddddh`   
                                                                                      
 Lee, H., PoncÃ©, S., Bushick, K., Hajinazar, S., Lafuente-Bartolome, J.,Leveillee, J.,
    Lian, C., Lihm, J., Macheda, F., Mori, H., Paudyal, H., Sio, W., Tiwari, S.,      
 Zacharias, M., Zhang, X., Bonini, N., Kioupakis, E., Margine, E.R., and Giustino F., 
                                                     npj Comput Mater 9, 156 (2023)   
                                                                                      

     Program EPW v.5.9 starts on 17Aug2025 at 14:28: 1 

     This program is part of the open-source Quantum ESPRESSO suite
     for quantum simulation of materials; please cite
         "P. Giannozzi et al., J. Phys.:Condens. Matter 21 395502 (2009);
         "P. Giannozzi et al., J. Phys.:Condens. Matter 29 465901 (2017);
         "P. Giannozzi et al., J. Chem. Phys. 152 154105 (2020);
          URL http://www.quantum-espresso.org", 
     in publications or presentations arising from this work. More details at
     http://www.quantum-espresso.org/quote

     Parallel version (MPI), running on    16 processors

     MPI processes distributed on     1 nodes
     K-points division:     npool     =      16
     1008528 MiB available memory on the printing compute node when the environment starts

     Reading input from epw.setup.in

     Suggestion: epw_memdist == .true. can reduce the memory usage when etf_mem == 0.

     No temperature supplied. Setting temps(:) to 300 K.

     Reading xml data from directory:

     temp/bn.save/

     IMPORTANT: XC functional enforced from input :
     Exchange-correlation= PW
                           (   1   4   0   0   0   0   0)
     Any further DFT definition will be discarded
     Please, verify this is what you really want


     G-vector sticks info
     --------------------
     sticks:   dense  smooth     PW     G-vecs:    dense   smooth      PW
     Sum         439     439    151                 6231     6231    1243

     Using Slab Decomposition

     Reading collected, re-writing distributed wavefunctions

     --                                                                         

     bravais-lattice index     =            2
     lattice parameter (a_0)   =       6.8300  a.u.
     unit-cell volume          =      79.6530 (a.u.)^3
     number of atoms/cell      =            2
     number of atomic types    =            2
     kinetic-energy cut-off    =      70.0000  Ry
     charge density cut-off    =     280.0000  Ry
     Exchange-correlation= PW
                           (   1   4   0   0   0   0   0)


     celldm(1)=    6.83000  celldm(2)=    0.00000  celldm(3)=    0.00000
     celldm(4)=    0.00000  celldm(5)=    0.00000  celldm(6)=    0.00000

     crystal axes: (cart. coord. in units of a_0)
               a(1) = ( -0.5000  0.0000  0.5000 )  
               a(2) = (  0.0000  0.5000  0.5000 )  
               a(3) = ( -0.5000  0.5000  0.0000 )  

     reciprocal axes: (cart. coord. in units 2 pi/a_0)
               b(1) = ( -1.0000 -1.0000  1.0000 )  
               b(2) = (  1.0000  1.0000  1.0000 )  
               b(3) = ( -1.0000  1.0000 -1.0000 )  


     Atoms inside the unit cell: 

   Cartesian axes

     site n.  atom      mass           positions (a_0 units)
        1     B      10.8110   tau( 1) = (   -0.12500    0.12500    0.12500  )
        2     N      14.0067   tau( 2) = (    0.12500   -0.12500   -0.12500  )

     25 Sym.Ops. (with q -> -q+G )


     G cutoff =  330.8565  (   6231 G-vectors)     FFT grid: ( 30, 30, 30)
     number of k points=   64
                       cart. coord. in units 2pi/a_0
        k(    1) = (   0.0000000   0.0000000   0.0000000), wk =   0.0312500
        k(    2) = (  -0.2500000   0.2500000  -0.2500000), wk =   0.0312500
        k(    3) = (  -0.5000000   0.5000000  -0.5000000), wk =   0.0312500
        k(    4) = (  -0.7500000   0.7500000  -0.7500000), wk =   0.0312500
        k(    5) = (   0.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(    6) = (   0.0000000   0.5000000   0.0000000), wk =   0.0312500
        k(    7) = (  -0.2500000   0.7500000  -0.2500000), wk =   0.0312500
        k(    8) = (  -0.5000000   1.0000000  -0.5000000), wk =   0.0312500
        k(    9) = (   0.5000000   0.5000000   0.5000000), wk =   0.0312500
        k(   10) = (   0.2500000   0.7500000   0.2500000), wk =   0.0312500
        k(   11) = (   0.0000000   1.0000000   0.0000000), wk =   0.0312500
        k(   12) = (  -0.2500000   1.2500000  -0.2500000), wk =   0.0312500
        k(   13) = (   0.7500000   0.7500000   0.7500000), wk =   0.0312500
        k(   14) = (   0.5000000   1.0000000   0.5000000), wk =   0.0312500
        k(   15) = (   0.2500000   1.2500000   0.2500000), wk =   0.0312500
        k(   16) = (   0.0000000   1.5000000   0.0000000), wk =   0.0312500
        k(   17) = (  -0.2500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   18) = (  -0.5000000   0.0000000   0.0000000), wk =   0.0312500
        k(   19) = (  -0.7500000   0.2500000  -0.2500000), wk =   0.0312500
        k(   20) = (  -1.0000000   0.5000000  -0.5000000), wk =   0.0312500
        k(   21) = (   0.0000000   0.0000000   0.5000000), wk =   0.0312500
        k(   22) = (  -0.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(   23) = (  -0.5000000   0.5000000   0.0000000), wk =   0.0312500
        k(   24) = (  -0.7500000   0.7500000  -0.2500000), wk =   0.0312500
        k(   25) = (   0.2500000   0.2500000   0.7500000), wk =   0.0312500
        k(   26) = (   0.0000000   0.5000000   0.5000000), wk =   0.0312500
        k(   27) = (  -0.2500000   0.7500000   0.2500000), wk =   0.0312500
        k(   28) = (  -0.5000000   1.0000000   0.0000000), wk =   0.0312500
        k(   29) = (   0.5000000   0.5000000   1.0000000), wk =   0.0312500
        k(   30) = (   0.2500000   0.7500000   0.7500000), wk =   0.0312500
        k(   31) = (   0.0000000   1.0000000   0.5000000), wk =   0.0312500
        k(   32) = (  -0.2500000   1.2500000   0.2500000), wk =   0.0312500
        k(   33) = (  -0.5000000  -0.5000000   0.5000000), wk =   0.0312500
        k(   34) = (  -0.7500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   35) = (  -1.0000000   0.0000000   0.0000000), wk =   0.0312500
        k(   36) = (  -1.2500000   0.2500000  -0.2500000), wk =   0.0312500
        k(   37) = (  -0.2500000  -0.2500000   0.7500000), wk =   0.0312500
        k(   38) = (  -0.5000000   0.0000000   0.5000000), wk =   0.0312500
        k(   39) = (  -0.7500000   0.2500000   0.2500000), wk =   0.0312500
        k(   40) = (  -1.0000000   0.5000000   0.0000000), wk =   0.0312500
        k(   41) = (   0.0000000   0.0000000   1.0000000), wk =   0.0312500
        k(   42) = (  -0.2500000   0.2500000   0.7500000), wk =   0.0312500
        k(   43) = (  -0.5000000   0.5000000   0.5000000), wk =   0.0312500
        k(   44) = (  -0.7500000   0.7500000   0.2500000), wk =   0.0312500
        k(   45) = (   0.2500000   0.2500000   1.2500000), wk =   0.0312500
        k(   46) = (   0.0000000   0.5000000   1.0000000), wk =   0.0312500
        k(   47) = (  -0.2500000   0.7500000   0.7500000), wk =   0.0312500
        k(   48) = (  -0.5000000   1.0000000   0.5000000), wk =   0.0312500
        k(   49) = (  -0.7500000  -0.7500000   0.7500000), wk =   0.0312500
        k(   50) = (  -1.0000000  -0.5000000   0.5000000), wk =   0.0312500
        k(   51) = (  -1.2500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   52) = (  -1.5000000   0.0000000   0.0000000), wk =   0.0312500
        k(   53) = (  -0.5000000  -0.5000000   1.0000000), wk =   0.0312500
        k(   54) = (  -0.7500000  -0.2500000   0.7500000), wk =   0.0312500
        k(   55) = (  -1.0000000   0.0000000   0.5000000), wk =   0.0312500
        k(   56) = (  -1.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(   57) = (  -0.2500000  -0.2500000   1.2500000), wk =   0.0312500
        k(   58) = (  -0.5000000   0.0000000   1.0000000), wk =   0.0312500
        k(   59) = (  -0.7500000   0.2500000   0.7500000), wk =   0.0312500
        k(   60) = (  -1.0000000   0.5000000   0.5000000), wk =   0.0312500
        k(   61) = (   0.0000000   0.0000000   1.5000000), wk =   0.0312500
        k(   62) = (  -0.2500000   0.2500000   1.2500000), wk =   0.0312500
        k(   63) = (  -0.5000000   0.5000000   1.0000000), wk =   0.0312500
        k(   64) = (  -0.7500000   0.7500000   0.7500000), wk =   0.0312500

     PseudoPot. # 1 for B  read from file:
     ./B.dojo.sr.ONCVv0.4.lda.standard.upf
     MD5 check sum: 69d4ef3dbc0509a37f66397c3ecc5321
     Pseudo is Norm-conserving + core correction, Zval =  3.0
     Generated using ONCVPSP code by D. R. Hamann
     Using radial grid of 1498 points,  4 beta functions with: 
                l(1) =   0
                l(2) =   0
                l(3) =   1
                l(4) =   1

     PseudoPot. # 2 for N  read from file:
     ./N.dojo.sr.ONCVv0.4.lda.standard.upf
     MD5 check sum: f7cfb052850314c53fa2901765c0b356
     Pseudo is Norm-conserving + core correction, Zval =  5.0
     Generated using ONCVPSP code by D. R. Hamann
     Using radial grid of 1058 points,  4 beta functions with: 
                l(1) =   0
                l(2) =   0
                l(3) =   1
                l(4) =   1
     EPW          :      0.54s CPU      0.58s WALL

     EPW          :      0.54s CPU      0.58s WALL

     -------------------------------------------------------------------
     Wannierization on  4 x  4 x  4 electronic grid
     -------------------------------------------------------------------

     Spin CASE ( default = unpolarized )

     Initializing Wannier90


     Initial Wannier projections

     (  -0.12500  -0.12500  -0.12500) :  l =  -3 mr =   1
     (  -0.12500  -0.12500  -0.12500) :  l =  -3 mr =   2
     (  -0.12500  -0.12500  -0.12500) :  l =  -3 mr =   3
     (  -0.12500  -0.12500  -0.12500) :  l =  -3 mr =   4
     (   0.12500   0.12500   0.12500) :  l =  -3 mr =   1
     (   0.12500   0.12500   0.12500) :  l =  -3 mr =   2
     (   0.12500   0.12500   0.12500) :  l =  -3 mr =   3
     (   0.12500   0.12500   0.12500) :  l =  -3 mr =   4

      - Number of bands is ( 12)
      - Number of total bands is ( 12)
      - Number of excluded bands is (  0)
      - Number of wannier functions is (  8)
      - All guiding functions are given 

  Reading data about k-point neighbours 

      - All neighbours are found 

     AMN
      k points =    64 in   16 pools
            1 of    4 on ionode
            2 of    4 on ionode
            3 of    4 on ionode
            4 of    4 on ionode

     AMN calculated

     MMN
      k points =    64 in   16 pools
            1 of    4 on ionode
            2 of    4 on ionode
            3 of    4 on ionode
            4 of    4 on ionode
     MMN calculated

     Running Wannier90

     Wannier Function centers (cartesian, alat) and spreads (ang):

     (   0.08390  -0.08390  -0.08390) :   0.66495
     (   0.16610  -0.08390  -0.16610) :   0.66495
     (   0.08390  -0.16610  -0.16610) :   0.66495
     (   0.16610  -0.16610  -0.08390) :   0.66495
     (  -0.08127   0.16873   0.16873) :   1.00894
     (  -0.08127   0.08127   0.08127) :   1.00894
     (  -0.16873   0.16873   0.08127) :   1.00894
     (  -0.16873   0.08127   0.16873) :   1.00894

     -------------------------------------------------------------------
     WANNIER      :      1.95s CPU      2.22s WALL (       1 calls)
     -------------------------------------------------------------------
     HDF5 is NOT used in the current build. Exciton-phonon coupling calculations are disabled.

     Dipole matrix elements calculated


     Calculating kgmap

     Progress kgmap: ########################################
     kmaps        :      0.01s CPU      0.06s WALL (       1 calls)
     Symmetries of Bravais lattice:  48
     Symmetries of crystal:          24


     ===================================================================
     irreducible q point #    1
     ===================================================================

     Symmetries of small group of q: 24
          in addition sym. q -> -q+G:

     Number of q in the star =    1
     List of q in the star:
          1   0.000000000   0.000000000   0.000000000
     Imposing acoustic sum rule on the dynamical matrix
     Read dielectric tensor and effective charges

        q(    1 ) = (   0.0000000   0.0000000   0.0000000 )


     ===================================================================
     irreducible q point #    2
     ===================================================================

     Symmetries of small group of q:  6
          in addition sym. q -> -q+G:

     Number of q in the star =    4
     List of q in the star:
          1   0.500000000  -0.500000000   0.500000000
          2  -0.500000000   0.500000000   0.500000000
          3   0.500000000   0.500000000  -0.500000000
          4  -0.500000000  -0.500000000  -0.500000000
     Message from routine init_vloc:
     Interpolation table for Vloc re-allocated

        q(    2 ) = (   0.5000000  -0.5000000   0.5000000 )
        q(    3 ) = (  -0.5000000   0.5000000   0.5000000 )
        q(    4 ) = (   0.5000000   0.5000000  -0.5000000 )
        q(    5 ) = (  -0.5000000  -0.5000000  -0.5000000 )


     ===================================================================
     irreducible q point #    3
     ===================================================================

     Symmetries of small group of q:  8
          in addition sym. q -> -q+G:

     Number of q in the star =    3
     List of q in the star:
          1   0.000000000  -1.000000000   0.000000000
          2   0.000000000   0.000000000  -1.000000000
          3  -1.000000000   0.000000000   0.000000000

        q(    6 ) = (   0.0000000  -1.0000000   0.0000000 )
        q(    7 ) = (   0.0000000   0.0000000  -1.0000000 )
        q(    8 ) = (  -1.0000000   0.0000000   0.0000000 )

     Writing epmatq on .epb files


     The .epb files have been correctly written


     Band disentanglement is used: nbndsub =    8

     Computes the analytic long-range interaction for polar materials [lpolar]
      
     Construct the Wigner-Seitz cell using Wannier centers and atomic positions 
     Number of WS vectors for electrons      123
     Number of WS vectors for phonons       25
     Number of WS vectors for electron-phonon       25
     Maximum number of cores for efficient parallelization       50

     Inside velocity step 1
 

     Velocity matrix elements calculated
 
 
     Bloch2wane:          1 /          8
     Bloch2wane:          2 /          8
     Bloch2wane:          3 /          8
     Bloch2wane:          4 /          8
     Bloch2wane:          5 /          8
     Bloch2wane:          6 /          8
     Bloch2wane:          7 /          8
     Bloch2wane:          8 /          8

     Writing Hamiltonian, Dynamical matrix and EP vertex in Wann rep to file

     ===================================================================
     Memory usage:  VmHWM =        84Mb
                   VmPeak =       817Mb
     ===================================================================
     
     Using uniform q-mesh:     1    1    1
     Size of q point mesh for interpolation:          1
     Using uniform k-mesh:     1    1    1
     Size of k point mesh for interpolation:          2
     Max number of k points per pool:                2

     Fermi energy coarse grid =  10.921574 eV

     Fermi energy is calculated from the fine k-mesh: Ef =  13.864919 eV

     Warning: check if difference with Fermi level fine grid makes sense

     ===================================================================

              ibndmin =     1  ebndmin =    -9.150 eV
              ibndmax =     8  ebndmax =    21.370 eV


     Number of ep-matrix elements per pool :          384 ~=    3.00 Kb (@ 8 bytes/ DP)
      
     A selecq.fmt file was found but re-created because selecqread == .FALSE. 
     We only need to compute        1 q-points
      
     ===================================================================
     Memory usage:  VmHWM =        84Mb
                   VmPeak =       817Mb
     ===================================================================


     Unfolding on the coarse grid
     elphon_wrap  :      1.14s CPU      1.35s WALL (       1 calls)
     dvqpsi_us3   :      0.71s CPU      0.73s WALL (     192 calls)
     com_dvloc    :      0.04s CPU      0.04s WALL (     192 calls)
                                        0.00s GPU  (     192 calls)
     dvqpsi_us_on :      0.03s CPU      0.03s WALL (     192 calls)
     calbec       :      0.02s CPU      0.02s WALL (     496 calls)
     fft          :      0.15s CPU      0.16s WALL (       4 calls)
     ffts         :      0.03s CPU      0.03s WALL (     192 calls)
     fftw         :      0.58s CPU      0.59s WALL (    4983 calls)

     INITIALIZATION: 

     set_drhoc    :      0.05s CPU      0.05s WALL (       9 calls)
     init_vloc    :      0.09s CPU      0.09s WALL (       1 calls)
     init_us_1    :      0.00s CPU      0.00s WALL (       1 calls)



     Electron-Phonon interpolation
     ep-interp    :      0.01s CPU      0.01s WALL (       1 calls)

     Ham: step 1  :      0.00s CPU      0.00s WALL (       1 calls)
     Ham: step 2  :      0.00s CPU      0.00s WALL (       1 calls)
     ep: step 1   :      0.00s CPU      0.00s WALL (       8 calls)
     ep: step 2   :      0.04s CPU      0.04s WALL (       8 calls)
     wigner_seitz :      0.01s CPU      0.01s WALL (       1 calls)
     DynW2B       :      0.00s CPU      0.00s WALL (       1 calls)
     HamW2B       :      0.00s CPU      0.00s WALL (       5 calls)
     ephW2Bp      :      0.00s CPU      0.01s WALL (       1 calls)
     ephW2B       :      0.00s CPU      0.00s WALL (       1 calls)
     vmeW2B       :      0.00s CPU      0.00s WALL (       2 calls)
     rgd_blk_epw  :      0.00s CPU      0.00s WALL (      33 calls)


     Total program execution
     EPW          :      4.01s CPU      4.83s WALL

     % Copyright (C) 2016-2023 EPW-Collaboration                                    
                                                                                    
     ===============================================================================
     Please consider citing the following papers.                                   
                                                                                                 
     % Paper describing the method on which EPW relies                                           
       F. Giustino and M. L. Cohen and S. G. Louie, Phys. Rev. B 76, 165108 (2007)               
                                                                                                 
     % Papers describing the EPW software                                                        
       H. Lee et al., npj Comput. Mater. 9, 156 (2023)                                           
       S. Ponc\'e, E.R. Margine, C. Verdi and F. Giustino, Comput. Phys. Commun. 209, 116 (2016) 
       J. Noffsinger et al., Comput. Phys. Commun. 181, 2140 (2010)                              
                                                                                                 
                                                                                             
     % Since you used the [lpolar] input,     please consider also citing                        
       C. Verdi and F. Giustino, Phys. Rev. Lett. 115, 176401 (2015)                         
                                                                                    
     For your convenience, this information is also reported in the                 
     functionality-dependent EPW.bib file.                                          
     ===============================================================================
                                                                                    
